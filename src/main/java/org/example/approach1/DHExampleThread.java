package org.example.approach1;

import java.math.BigInteger;
import java.util.concurrent.ExecutionException;

public class DHExampleThread {
    static final int BASE = 16;

    public static void main(String[] args) throws ExecutionException, InterruptedException {

        BigInteger a = new BigInteger
        BigInteger b = new BigInteger

        Participant alice = new Participant("Alice", a, BASE);
        Participant bob = new Participant("Bob", b, BASE);

        // Candidate primes p
        System.out.println("[Generating candidate p's]");
        Thread paThread = alice.calculateCandidateP();
        Thread pbThread = bob.calculateCandidateP();
        paThread.join();
        pbThread.join();

        BigInteger pa = alice.getPx();
        BigInteger pb = bob.getPx();
        System.out.println();

        // p and g
        System.out.println("[Choosing p and g]");
        long start = System.nanoTime();
        BigInteger p = pa.compareTo(pb) > 0 ? pa : pb;
        System.out.println("[p time] " + (System.nanoTime() - start) + " ms\n");
        BigInteger g = new BigInteger("2");
        System.out.println("Chosen p:\t" + p.toString(BASE) + "\n");

        // Public keys A and B
        System.out.println("[Calculating public keys]");
        Thread AThread = alice.calculatePublicKey(g, p);
        Thread BThread = bob.calculatePublicKey(g, p);
        AThread.join();
        BThread.join();

        BigInteger A = alice.getPublicKey();
        BigInteger B = bob.getPublicKey();
        System.out.println();

        // Shared secret
        System.out.println("[Calculating the shared secret]");
        Thread ASecretThread = alice.calculateSharedSecret(B, p);
        Thread BSecretThread = bob.calculateSharedSecret(A, p);
        ASecretThread.join();
        BSecretThread.join();

        BigInteger sA = alice.getSharedSecret();
        BigInteger sB = alice.getSharedSecret();

        assert (sA.equals(sB)) : "Shared keys are not the same!";
    }
}


